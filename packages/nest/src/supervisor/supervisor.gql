scalar JSON

type Task {
  id: ID!
  date: String!
  hash: String
}

enum TaskState {
  "The task is waiting to be executed."
  PENDING
  "The task is currently being executed by at least one scraper."
  RUNNING
  "The task has been processed successfully and represents the latest version of the data."
  SUCCESS
  "The task has been processed successfully but data source hasn't changed."
  SKIPPED
  "The task could not be finalized."
  FAILED
  "Data from this task were already processed by a newer task."
  OUTDATED
  "The task has been cancelled by the user or system."
  CANCELLED
}

enum TaskCollection {
  QUEUE
  HISTORICAL
}

input TaskResult {
  result: [String!]!
  hash: String!
}

type Query {
  getTasks: [Task!]!
  getTaskCollection(collection: TaskCollection!): [JSON!]!
}

type Mutation {
  updateTaskState(id: ID!, state: TaskState!): Boolean!
  finishTask(id: ID!, result: TaskResult!): Boolean!
}
