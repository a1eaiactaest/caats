scalar DateTime
scalar PositiveInt

input ScheduleInput {
  since: DateTime
  until: DateTime
  skip: PositiveInt
  take: PositiveInt
}

input ScheduleTargets {
  groups: [String!]
  hosts: [String!]
}

"Represents a time range."
input SinceUntil {
  since: DateTime
  until: DateTime
}

"Represents a skip and take. Useful for pagination."
input SkipTake {
  "The number of items to skip."
  skip: PositiveInt
  "The number of items to take."
  take: PositiveInt
}

input GroupInput {
  groups: [String!]!
}

input HostInput {
  host: String!
}

type Scraper {
  id: ID!
  alias: String!
  state: String!
  lastSeen: DateTime
}

type StoredTask {
  id: ID!
  createdAt: DateTime!
  finishedAt: DateTime
  initialHash: String
  finalHash: String
  status: String!
  scraper: Scraper
}

type EventSource {
  id: ID!
  constantId: String!
  object: JSON!
  createdAt: DateTime!
  task: StoredTask!
}

"Represents a schedule event."
type ScheduleEvent {
  id: ID!
  startsAt: DateTime!
  endsAt: DateTime!
  "The full name of the subject."
  subject: String!
  "The short code of the subject."
  code: String!
  "The type of the event."
  type: String!
  "The room where the event is taking place."
  room: String
  "Hosts that are attending this event."
  hosts: [String!]!
  "Groups that are attending this event."
  groups: [String!]!
  "The source of the event."
  source: EventSource!
  "The following event."
  next: ScheduleEvent
  "The previous event."
  previous: ScheduleEvent
}

type User {
  "List of events for current user."
  events(search: ScheduleInput): [ScheduleEvent!]!
  "The next event for current user."
  nextEvent: ScheduleEvent
  "The current event for current user."
  currentEvent: ScheduleEvent
  # "Scrapers created by this user."
  # scrapers: [Scraper!]!
}

type Query {
  "List of all available events. Not specifying target results in empty list."
  events(search: ScheduleInput, targets: ScheduleTargets): [ScheduleEvent!]!
  "Details for specified event."
  event(id: Int!): ScheduleEvent
  scrapers: [Scraper!]!
  tasks: [StoredTask!]!
  sources: [EventSource!]!
  "Returns groups matching the filter. Function for custom frontend."
  groups(filter: [[String!]!]): [String!]!

  findByDescription(query: String!): [ScheduleEvent!]!
}
