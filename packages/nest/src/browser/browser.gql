scalar DateTime
scalar PositiveInt

"Represents a time range."
input SinceUntil {
  since: DateTime
  until: DateTime
}

"Represents a skip and take. Useful for pagination."
input SkipTake {
  "The number of items to skip."
  skip: PositiveInt
  "The number of items to take."
  take: PositiveInt
}

input GroupInput {
  groups: [String!]!
}

input HostInput {
  host: String!
}

type Scraper {
  id: ID!
  alias: String!
  state: String!
  lastSeen: DateTime
}

type StoredTask {
  id: ID!
  createdAt: DateTime!
  finishedAt: DateTime
  initialHash: String
  finalHash: String
  status: String!
  worker: Scraper
}

type EventSource {
  id: ID!
  constantId: String!
  object: JSON!
  createdAt: DateTime!
  task: StoredTask!
}

"Represents a schedule event."
type ScheduleEvent {
  id: ID!
  startsAt: DateTime!
  endsAt: DateTime!
  "The full name of the subject."
  subject: String!
  "The short code of the subject."
  code: String!
  "The type of the event."
  type: String!
  "The room where the event is taking place."
  room: String
  "Hosts that are attending this event."
  hosts: [String!]!
  "Groups that are attending this event."
  groups: [String!]!
  "The source of the event."
  source: EventSource!
}

type Query {
  "Returns all schedule events for the given user based on theirs preferences. Requires authentication."
  getScheduleUser(sinceUntil: SinceUntil, skipTake: SkipTake): [ScheduleEvent!]!
  "Returns all schedule events for the given groups."
  getScheduleGroups(groups: GroupInput!, sinceUntil: SinceUntil, skipTake: SkipTake): [ScheduleEvent!]!
  "Returns all schedule events for the given host."
  getScheduleHosts(host: HostInput!, sinceUntil: SinceUntil, skipTake: SkipTake): [ScheduleEvent!]!

  getEvent(id: ID!): ScheduleEvent

  getGroups: [String!]

  autocompleteGroups(query: String!): [String!]

  getEventHistory(constantId: String!): [ScheduleEvent!]!

  findByDescription(query: String!): [ScheduleEvent!]!

  getNextUserEvent: ScheduleEvent

  getCurrentUserEvent: ScheduleEvent
}
