datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["extendedWhereUnique", "fullTextSearch", "fullTextIndex", "metrics"]
}

/// Model that represents a user of the system.
model User {
    /// Internal user id
    id               String             @id @default(uuid()) @db.Uuid
    /// Mail provided by Google
    email            String             @unique
    /// User selected name
    name             String?
    /// Users profile picture
    picture          String?
    /// Superuser should be able to access all data and modify data accessors
    isSuperuser      Boolean            @default(false)
    groups           String[]
    sessions         UserSession[]
    icsSubscriptions IcsSubscriptions[]
}

model UserSession {
    id        String    @id @default(uuid()) @db.Uuid
    user      User      @relation(fields: [userId], references: [id])
    userId    String    @db.Uuid
    createdAt DateTime  @default(now())
    expiresAt DateTime  @default(dbgenerated("now() + interval '1 day'"))
    revokedAt DateTime?

    @@index([expiresAt(sort: Asc)])
}

enum TaskStatus {
    PENDING
    RUNNING
    SUCCESS
    SKIPPED
    FAILED
    OUTDATED
    CANCELLED
}

model Task {
    id          Int          @id @default(autoincrement())
    createdAt   DateTime     @default(now())
    finishedAt  DateTime?
    targetDate  DateTime     @db.Date
    initialHash String?
    finalHash   String?
    status      TaskStatus
    results     TaskResult[]

    @@index([createdAt(sort: Desc), targetDate(sort: Asc)])
}

model TaskResult {
    id         Int             @id @default(autoincrement())
    task       Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId     Int
    constantId String          @db.Char(16) @unique
    createdAt  DateTime        @default(now())
    object     Json
    usedBy     TimetableEvent?

    @@index([createdAt(sort: Desc)])
    @@index([object], type: Gin)
}

model TimetableEvent {
    id        Int        @id @default(autoincrement())
    createdAt DateTime   @default(now())
    startsAt  DateTime
    endsAt    DateTime
    source    TaskResult @relation(fields: [sourceId], references: [id], onDelete: Cascade)
    sourceId  Int        @unique
    name      String
    code      String
    type      String
    room      String?
    groups    String[]
    hosts     String[]

    @@index([startsAt(sort: Asc), code(sort: Asc), groups(sort: Asc)])
}

model IcsSubscriptions {
    id            String   @id
    createdAt     DateTime @default(now())
    includeGroups String[]
    userId        String   @db.Uuid
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
